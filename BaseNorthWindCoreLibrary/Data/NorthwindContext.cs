
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using BaseNetCoreConfigurationHelper;
using BaseNorthWindCoreLibrary.Data.Interceptors;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;
using NorthWindCoreLibrary.Data;
using NorthWindCoreLibrary.Models;

#nullable disable

namespace BaseNorthWindCoreLibrary.Data
{
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Simple Logging
    /// https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/simple-logging
    /// </remarks>
    public partial class NorthwindContext : DbContext
    {

        private readonly StreamWriter _logStream;
        
        public NorthwindContext()
        {
#if !DEBUG
            try
            {
                _logStream = new("logging.txt", append: true);
            }
            catch (Exception exception)
            {

                Debug.WriteLine(exception.Message);


            }
#endif
        }

        public NorthwindContext(DbContextOptions<NorthwindContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BusinessEntityPhone> BusinessEntityPhone { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<ContactDevices> ContactDevices { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<EmployeeTerritories> EmployeeTerritories { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PhoneType> PhoneType { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Shippers> Shippers { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Territories> Territories { get; set; }

        /// <summary>
        /// Provides options for logging
        /// https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/simple-logging
        /// </summary>
        /// <param name="optionsBuilder"></param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                // how we normally do a connection with scaffolding 
                //optionsBuilder.UseSqlServer("Data Source=.\\SQLEXPRESS;Initial Catalog=NorthWind2020;Integrated Security=True");
                
                optionsBuilder.UseSqlServer(Helper.ConnectionString());

                //CustomInterceptorNoLogging(optionsBuilder);

                //optionsBuilder.UseLazyLoadingProxies().UseSqlServer(Helper.ConnectionString());

                //LogQueryInfoToFile(optionsBuilder);
                //LogQueryInfoToDebugOutputWindow(optionsBuilder);
            }
        }
        /// <summary>
        /// Log information to Visual Studio's Output window
        /// </summary>
        /// <param name="optionsBuilder"></param>
        private static void LogQueryInfoToDebugOutputWindow(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(Helper.ConnectionString())
                .EnableSensitiveDataLogging()
                .LogTo(message => Debug.WriteLine(message));
        }
        /// <summary>
        /// Log to file specified in <see cref="_logStream"/>
        /// </summary>
        /// <param name="optionsBuilder"></param>
        private void LogQueryInfoToFile(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(Helper.ConnectionString())
                .EnableSensitiveDataLogging()
                .LogTo(message => _logStream.WriteLine(message),
                    LogLevel.Information,
                    DbContextLoggerOptions.Category);
        }
        private static void NoLogging(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(Helper.ConnectionString());
        }
        private static void CustomInterceptorNoLogging(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder
                .UseSqlServer(Helper.ConnectionString())
                .AddInterceptors(new SavedChangesInterceptor());
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new BusinessEntityPhoneConfiguration());
            modelBuilder.ApplyConfiguration(new CategoriesConfiguration());
            modelBuilder.ApplyConfiguration(new ContactDevicesConfiguration());
            modelBuilder.ApplyConfiguration(new ContactTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ContactsConfiguration());
            modelBuilder.ApplyConfiguration(new CountriesConfiguration());
            modelBuilder.ApplyConfiguration(new CustomersConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeTerritoriesConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeesConfiguration());
            modelBuilder.ApplyConfiguration(new OrderDetailsConfiguration());
            modelBuilder.ApplyConfiguration(new OrdersConfiguration());
            modelBuilder.ApplyConfiguration(new PhoneTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ProductsConfiguration());
            modelBuilder.ApplyConfiguration(new RegionConfiguration());
            modelBuilder.ApplyConfiguration(new ShippersConfiguration());
            modelBuilder.ApplyConfiguration(new SuppliersConfiguration());
            modelBuilder.ApplyConfiguration(new TerritoriesConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        #region Takes care of disposing stream used for logging
        public override void Dispose()
        {
            base.Dispose();
            
            #if !DEBUG
            _logStream.Dispose();
            #endif

        }

        public override async ValueTask DisposeAsync()
        {
            await base.DisposeAsync();
            #if !DEBUG
            if (_logStream is not null)
            {
                await _logStream.DisposeAsync();
            }
            #endif
            
        }
#endregion
    }
}
